#ip 5

// safety check
0  r[1] = 123
1  r[1] = r[1] & 456
2  eqri 1 72 1
3  r[5] = r[1] + r[5]
4  r[5] = 0

// real program
// setup
5  r[1] = 0                           r1 = 0

6  r[2] = r[1] | 65536                r2 = 65536
7  r[1] = 6663054
8  r[4] = r[2] & 255
9 r[1] = r[1] + r[4]
10 r[1] = r[1] & 16777215
11 r[1] = r[1] * 65899
12 r[1] = r[1] & 16777215
13 r[4] = 1 if 256 > r[2] else 0       if 256 > r2:
14 r[5] = r[4] + r[5]                    jump 16
15 r[5] = r[5] + 1                     else: jump 17
16 r[5] = 27                           jump 28
17 r[4] = 0                            r4 = 0
18 r[3] = r[4] + 1                     r3 = r[4] + 1
19 r[3] = r[3] * 256                   r[3] = r[3] * 256
20 r[3] = 1 if r[3] > r[2] else 0      if r[3] > r[2]:
21 r[5] = r[3] + r[5]                    jump 23 -> 26
22 r[5] = r[5] + 1                     else: jump 24
23 r[5] = 25                           jump 26
24 r[4] = r[4] + 1                     r[4] += 1
25 r[5] = 17                           jump 18
26 r[2] = r[4]                         r[2] = r[4]
27 r[5] = 7                            jump 8

28 r[4] = 1 if r[1] == r[0] else 0     if r1 == r0:
29 r[5] = r[4] + r[5]                    exit
30 r[5] = 5                            else jump 6


r1 = 0
start:
r2 = r1 | 65536
r1 = 6663054

outer:
r4 = r2 & 0xFF
r1 = (((r1 + r4) & 0xFFFFFF) * 65899) & 0xFFFFFF
if 256 > r2:
  if r1 == r0:
    exit
  else:
    jump start
r4 = 0
inner:
r3 = (r4 + 1) * 256
if r3 > r2:
  r2 = r4
  jump outer
else:
  r4 += 1
  jump inner
---

while True:
    r2 = r1 | 0x10000
    r1 = 6663054
    while True:
        r4 = r2 & 0xFF
        r1 = (((r1 + r4) & 0xFFFFFF) * 65899) & 0xFFFFFF
        if 256 > r2:
            if r1 == r0:
                exit
        r2 = r2 // 256 # optimised inner loop -- finding the result of dividing r2 by 256 and flooring
